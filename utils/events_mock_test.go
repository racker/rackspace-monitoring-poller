// Code generated by MockGen. DO NOT EDIT.
// Source: utils/events.go

package utils

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEvent is a mock of Event interface
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
}

// MockEventMockRecorder is the mock recorder for MockEvent
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockEvent) EXPECT() *MockEventMockRecorder {
	return _m.recorder
}

// Type mocks base method
func (_m *MockEvent) Type() string {
	ret := _m.ctrl.Call(_m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type
func (_mr *MockEventMockRecorder) Type() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Type", reflect.TypeOf((*MockEvent)(nil).Type))
}

// Target mocks base method
func (_m *MockEvent) Target() interface{} {
	ret := _m.ctrl.Call(_m, "Target")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Target indicates an expected call of Target
func (_mr *MockEventMockRecorder) Target() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Target", reflect.TypeOf((*MockEvent)(nil).Target))
}

// MockEventConsumer is a mock of EventConsumer interface
type MockEventConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockEventConsumerMockRecorder
}

// MockEventConsumerMockRecorder is the mock recorder for MockEventConsumer
type MockEventConsumerMockRecorder struct {
	mock *MockEventConsumer
}

// NewMockEventConsumer creates a new mock instance
func NewMockEventConsumer(ctrl *gomock.Controller) *MockEventConsumer {
	mock := &MockEventConsumer{ctrl: ctrl}
	mock.recorder = &MockEventConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockEventConsumer) EXPECT() *MockEventConsumerMockRecorder {
	return _m.recorder
}

// HandleEvent mocks base method
func (_m *MockEventConsumer) HandleEvent(evt Event) error {
	ret := _m.ctrl.Call(_m, "HandleEvent", evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleEvent indicates an expected call of HandleEvent
func (_mr *MockEventConsumerMockRecorder) HandleEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HandleEvent", reflect.TypeOf((*MockEventConsumer)(nil).HandleEvent), arg0)
}

// MockEventSource is a mock of EventSource interface
type MockEventSource struct {
	ctrl     *gomock.Controller
	recorder *MockEventSourceMockRecorder
}

// MockEventSourceMockRecorder is the mock recorder for MockEventSource
type MockEventSourceMockRecorder struct {
	mock *MockEventSource
}

// NewMockEventSource creates a new mock instance
func NewMockEventSource(ctrl *gomock.Controller) *MockEventSource {
	mock := &MockEventSource{ctrl: ctrl}
	mock.recorder = &MockEventSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockEventSource) EXPECT() *MockEventSourceMockRecorder {
	return _m.recorder
}

// RegisterEventConsumer mocks base method
func (_m *MockEventSource) RegisterEventConsumer(consumer EventConsumer) {
	_m.ctrl.Call(_m, "RegisterEventConsumer", consumer)
}

// RegisterEventConsumer indicates an expected call of RegisterEventConsumer
func (_mr *MockEventSourceMockRecorder) RegisterEventConsumer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RegisterEventConsumer", reflect.TypeOf((*MockEventSource)(nil).RegisterEventConsumer), arg0)
}

// DeregisterEventConsumer mocks base method
func (_m *MockEventSource) DeregisterEventConsumer(consumer EventConsumer) {
	_m.ctrl.Call(_m, "DeregisterEventConsumer", consumer)
}

// DeregisterEventConsumer indicates an expected call of DeregisterEventConsumer
func (_mr *MockEventSourceMockRecorder) DeregisterEventConsumer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeregisterEventConsumer", reflect.TypeOf((*MockEventSource)(nil).DeregisterEventConsumer), arg0)
}
