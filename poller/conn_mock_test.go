// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/racker/rackspace-monitoring-poller/poller (interfaces: Connection)

package poller

import (
	context "context"
	tls "crypto/tls"
	io "io"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// Mock of Connection interface
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *_MockConnectionRecorder
}

// Recorder for MockConnection (not exported)
type _MockConnectionRecorder struct {
	mock *MockConnection
}

func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &_MockConnectionRecorder{mock}
	return mock
}

func (_m *MockConnection) EXPECT() *_MockConnectionRecorder {
	return _m.recorder
}

func (_m *MockConnection) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockConnectionRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockConnection) Connect(_param0 context.Context, _param1 *tls.Config) error {
	ret := _m.ctrl.Call(_m, "Connect", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnectionRecorder) Connect(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Connect", arg0, arg1)
}

func (_m *MockConnection) GetConnection() io.ReadWriteCloser {
	ret := _m.ctrl.Call(_m, "GetConnection")
	ret0, _ := ret[0].(io.ReadWriteCloser)
	return ret0
}

func (_mr *_MockConnectionRecorder) GetConnection() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetConnection")
}

func (_m *MockConnection) GetGUID() string {
	ret := _m.ctrl.Call(_m, "GetGUID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockConnectionRecorder) GetGUID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetGUID")
}

func (_m *MockConnection) GetSession() Session {
	ret := _m.ctrl.Call(_m, "GetSession")
	ret0, _ := ret[0].(Session)
	return ret0
}

func (_mr *_MockConnectionRecorder) GetSession() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSession")
}

func (_m *MockConnection) GetStream() ConnectionStream {
	ret := _m.ctrl.Call(_m, "GetStream")
	ret0, _ := ret[0].(ConnectionStream)
	return ret0
}

func (_mr *_MockConnectionRecorder) GetStream() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetStream")
}

func (_m *MockConnection) SetReadDeadline(_param0 time.Time) {
	_m.ctrl.Call(_m, "SetReadDeadline", _param0)
}

func (_mr *_MockConnectionRecorder) SetReadDeadline(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetReadDeadline", arg0)
}

func (_m *MockConnection) SetWriteDeadline(_param0 time.Time) {
	_m.ctrl.Call(_m, "SetWriteDeadline", _param0)
}

func (_mr *_MockConnectionRecorder) SetWriteDeadline(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWriteDeadline", arg0)
}

func (_m *MockConnection) Wait() {
	_m.ctrl.Call(_m, "Wait")
}

func (_mr *_MockConnectionRecorder) Wait() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Wait")
}
