// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/racker/rackspace-monitoring-poller/poller (interfaces: Session)

package poller

import (
	gomock "github.com/golang/mock/gomock"
	protocol "github.com/racker/rackspace-monitoring-poller/protocol"
	time "time"
)

// Mock of Session interface
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *_MockSessionRecorder
}

// Recorder for MockSession (not exported)
type _MockSessionRecorder struct {
	mock *MockSession
}

func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &_MockSessionRecorder{mock}
	return mock
}

func (_m *MockSession) EXPECT() *_MockSessionRecorder {
	return _m.recorder
}

func (_m *MockSession) Auth() {
	_m.ctrl.Call(_m, "Auth")
}

func (_mr *_MockSessionRecorder) Auth() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Auth")
}

func (_m *MockSession) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockSessionRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockSession) GetReadDeadline() time.Time {
	ret := _m.ctrl.Call(_m, "GetReadDeadline")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

func (_mr *_MockSessionRecorder) GetReadDeadline() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetReadDeadline")
}

func (_m *MockSession) GetWriteDeadline() time.Time {
	ret := _m.ctrl.Call(_m, "GetWriteDeadline")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

func (_mr *_MockSessionRecorder) GetWriteDeadline() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetWriteDeadline")
}

func (_m *MockSession) Respond(_param0 protocol.Frame) {
	_m.ctrl.Call(_m, "Respond", _param0)
}

func (_mr *_MockSessionRecorder) Respond(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Respond", arg0)
}

func (_m *MockSession) Send(_param0 protocol.Frame) {
	_m.ctrl.Call(_m, "Send", _param0)
}

func (_mr *_MockSessionRecorder) Send(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Send", arg0)
}

func (_m *MockSession) SetHeartbeatInterval(_param0 uint64) {
	_m.ctrl.Call(_m, "SetHeartbeatInterval", _param0)
}

func (_mr *_MockSessionRecorder) SetHeartbeatInterval(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetHeartbeatInterval", arg0)
}

func (_m *MockSession) Wait() {
	_m.ctrl.Call(_m, "Wait")
}

func (_mr *_MockSessionRecorder) Wait() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Wait")
}
