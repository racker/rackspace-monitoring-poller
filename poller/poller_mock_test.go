// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/racker/rackspace-monitoring-poller/poller (interfaces: LogPrefixGetter,ConnectionStream,Connection,Session,CheckScheduler,CheckExecutor,Scheduler,ChecksReconciler)

package poller_test

import (
	context "context"
	tls "crypto/tls"
	gomock "github.com/golang/mock/gomock"
	check "github.com/racker/rackspace-monitoring-poller/check"
	config "github.com/racker/rackspace-monitoring-poller/config"
	poller "github.com/racker/rackspace-monitoring-poller/poller"
	protocol "github.com/racker/rackspace-monitoring-poller/protocol"
	utils "github.com/racker/rackspace-monitoring-poller/utils"
	io "io"
	reflect "reflect"
	time "time"
)

// MockLogPrefixGetter is a mock of LogPrefixGetter interface
type MockLogPrefixGetter struct {
	ctrl     *gomock.Controller
	recorder *MockLogPrefixGetterMockRecorder
}

// MockLogPrefixGetterMockRecorder is the mock recorder for MockLogPrefixGetter
type MockLogPrefixGetterMockRecorder struct {
	mock *MockLogPrefixGetter
}

// NewMockLogPrefixGetter creates a new mock instance
func NewMockLogPrefixGetter(ctrl *gomock.Controller) *MockLogPrefixGetter {
	mock := &MockLogPrefixGetter{ctrl: ctrl}
	mock.recorder = &MockLogPrefixGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockLogPrefixGetter) EXPECT() *MockLogPrefixGetterMockRecorder {
	return _m.recorder
}

// GetLogPrefix mocks base method
func (_m *MockLogPrefixGetter) GetLogPrefix() string {
	ret := _m.ctrl.Call(_m, "GetLogPrefix")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLogPrefix indicates an expected call of GetLogPrefix
func (_mr *MockLogPrefixGetterMockRecorder) GetLogPrefix() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetLogPrefix", reflect.TypeOf((*MockLogPrefixGetter)(nil).GetLogPrefix))
}

// MockConnectionStream is a mock of ConnectionStream interface
type MockConnectionStream struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionStreamMockRecorder
}

// MockConnectionStreamMockRecorder is the mock recorder for MockConnectionStream
type MockConnectionStreamMockRecorder struct {
	mock *MockConnectionStream
}

// NewMockConnectionStream creates a new mock instance
func NewMockConnectionStream(ctrl *gomock.Controller) *MockConnectionStream {
	mock := &MockConnectionStream{ctrl: ctrl}
	mock.recorder = &MockConnectionStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockConnectionStream) EXPECT() *MockConnectionStreamMockRecorder {
	return _m.recorder
}

// Connect mocks base method
func (_m *MockConnectionStream) Connect() {
	_m.ctrl.Call(_m, "Connect")
}

// Connect indicates an expected call of Connect
func (_mr *MockConnectionStreamMockRecorder) Connect() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Connect", reflect.TypeOf((*MockConnectionStream)(nil).Connect))
}

// DeregisterEventConsumer mocks base method
func (_m *MockConnectionStream) DeregisterEventConsumer(_param0 utils.EventConsumer) {
	_m.ctrl.Call(_m, "DeregisterEventConsumer", _param0)
}

// DeregisterEventConsumer indicates an expected call of DeregisterEventConsumer
func (_mr *MockConnectionStreamMockRecorder) DeregisterEventConsumer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeregisterEventConsumer", reflect.TypeOf((*MockConnectionStream)(nil).DeregisterEventConsumer), arg0)
}

// Done mocks base method
func (_m *MockConnectionStream) Done() <-chan struct{} {
	ret := _m.ctrl.Call(_m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done
func (_mr *MockConnectionStreamMockRecorder) Done() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Done", reflect.TypeOf((*MockConnectionStream)(nil).Done))
}

// ReconcileChecks mocks base method
func (_m *MockConnectionStream) ReconcileChecks(_param0 poller.ChecksPrepared) {
	_m.ctrl.Call(_m, "ReconcileChecks", _param0)
}

// ReconcileChecks indicates an expected call of ReconcileChecks
func (_mr *MockConnectionStreamMockRecorder) ReconcileChecks(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReconcileChecks", reflect.TypeOf((*MockConnectionStream)(nil).ReconcileChecks), arg0)
}

// RegisterEventConsumer mocks base method
func (_m *MockConnectionStream) RegisterEventConsumer(_param0 utils.EventConsumer) {
	_m.ctrl.Call(_m, "RegisterEventConsumer", _param0)
}

// RegisterEventConsumer indicates an expected call of RegisterEventConsumer
func (_mr *MockConnectionStreamMockRecorder) RegisterEventConsumer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RegisterEventConsumer", reflect.TypeOf((*MockConnectionStream)(nil).RegisterEventConsumer), arg0)
}

// SendMetrics mocks base method
func (_m *MockConnectionStream) SendMetrics(_param0 *check.ResultSet) {
	_m.ctrl.Call(_m, "SendMetrics", _param0)
}

// SendMetrics indicates an expected call of SendMetrics
func (_mr *MockConnectionStreamMockRecorder) SendMetrics(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SendMetrics", reflect.TypeOf((*MockConnectionStream)(nil).SendMetrics), arg0)
}

// ValidateChecks mocks base method
func (_m *MockConnectionStream) ValidateChecks(_param0 poller.ChecksPreparing) error {
	ret := _m.ctrl.Call(_m, "ValidateChecks", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateChecks indicates an expected call of ValidateChecks
func (_mr *MockConnectionStreamMockRecorder) ValidateChecks(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ValidateChecks", reflect.TypeOf((*MockConnectionStream)(nil).ValidateChecks), arg0)
}

// MockConnection is a mock of Connection interface
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return _m.recorder
}

// Authenticated mocks base method
func (_m *MockConnection) Authenticated() <-chan struct{} {
	ret := _m.ctrl.Call(_m, "Authenticated")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Authenticated indicates an expected call of Authenticated
func (_mr *MockConnectionMockRecorder) Authenticated() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Authenticated", reflect.TypeOf((*MockConnection)(nil).Authenticated))
}

// Close mocks base method
func (_m *MockConnection) Close() {
	_m.ctrl.Call(_m, "Close")
}

// Close indicates an expected call of Close
func (_mr *MockConnectionMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockConnection)(nil).Close))
}

// Connect mocks base method
func (_m *MockConnection) Connect(_param0 context.Context, _param1 *config.Config, _param2 *tls.Config) error {
	ret := _m.ctrl.Call(_m, "Connect", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (_mr *MockConnectionMockRecorder) Connect(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Connect", reflect.TypeOf((*MockConnection)(nil).Connect), arg0, arg1, arg2)
}

// Done mocks base method
func (_m *MockConnection) Done() <-chan struct{} {
	ret := _m.ctrl.Call(_m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done
func (_mr *MockConnectionMockRecorder) Done() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Done", reflect.TypeOf((*MockConnection)(nil).Done))
}

// GetClockOffset mocks base method
func (_m *MockConnection) GetClockOffset() int64 {
	ret := _m.ctrl.Call(_m, "GetClockOffset")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetClockOffset indicates an expected call of GetClockOffset
func (_mr *MockConnectionMockRecorder) GetClockOffset() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetClockOffset", reflect.TypeOf((*MockConnection)(nil).GetClockOffset))
}

// GetFarendReader mocks base method
func (_m *MockConnection) GetFarendReader() io.Reader {
	ret := _m.ctrl.Call(_m, "GetFarendReader")
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// GetFarendReader indicates an expected call of GetFarendReader
func (_mr *MockConnectionMockRecorder) GetFarendReader() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetFarendReader", reflect.TypeOf((*MockConnection)(nil).GetFarendReader))
}

// GetFarendWriter mocks base method
func (_m *MockConnection) GetFarendWriter() io.Writer {
	ret := _m.ctrl.Call(_m, "GetFarendWriter")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// GetFarendWriter indicates an expected call of GetFarendWriter
func (_mr *MockConnectionMockRecorder) GetFarendWriter() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetFarendWriter", reflect.TypeOf((*MockConnection)(nil).GetFarendWriter))
}

// GetGUID mocks base method
func (_m *MockConnection) GetGUID() string {
	ret := _m.ctrl.Call(_m, "GetGUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGUID indicates an expected call of GetGUID
func (_mr *MockConnectionMockRecorder) GetGUID() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetGUID", reflect.TypeOf((*MockConnection)(nil).GetGUID))
}

// GetLatency mocks base method
func (_m *MockConnection) GetLatency() int64 {
	ret := _m.ctrl.Call(_m, "GetLatency")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetLatency indicates an expected call of GetLatency
func (_mr *MockConnectionMockRecorder) GetLatency() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetLatency", reflect.TypeOf((*MockConnection)(nil).GetLatency))
}

// GetLogPrefix mocks base method
func (_m *MockConnection) GetLogPrefix() string {
	ret := _m.ctrl.Call(_m, "GetLogPrefix")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLogPrefix indicates an expected call of GetLogPrefix
func (_mr *MockConnectionMockRecorder) GetLogPrefix() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetLogPrefix", reflect.TypeOf((*MockConnection)(nil).GetLogPrefix))
}

// GetSession mocks base method
func (_m *MockConnection) GetSession() poller.Session {
	ret := _m.ctrl.Call(_m, "GetSession")
	ret0, _ := ret[0].(poller.Session)
	return ret0
}

// GetSession indicates an expected call of GetSession
func (_mr *MockConnectionMockRecorder) GetSession() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetSession", reflect.TypeOf((*MockConnection)(nil).GetSession))
}

// HasLatencyMeasurements mocks base method
func (_m *MockConnection) HasLatencyMeasurements() bool {
	ret := _m.ctrl.Call(_m, "HasLatencyMeasurements")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasLatencyMeasurements indicates an expected call of HasLatencyMeasurements
func (_mr *MockConnectionMockRecorder) HasLatencyMeasurements() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HasLatencyMeasurements", reflect.TypeOf((*MockConnection)(nil).HasLatencyMeasurements))
}

// SetAuthenticated mocks base method
func (_m *MockConnection) SetAuthenticated() {
	_m.ctrl.Call(_m, "SetAuthenticated")
}

// SetAuthenticated indicates an expected call of SetAuthenticated
func (_mr *MockConnectionMockRecorder) SetAuthenticated() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetAuthenticated", reflect.TypeOf((*MockConnection)(nil).SetAuthenticated))
}

// SetReadDeadline mocks base method
func (_m *MockConnection) SetReadDeadline(_param0 time.Time) {
	_m.ctrl.Call(_m, "SetReadDeadline", _param0)
}

// SetReadDeadline indicates an expected call of SetReadDeadline
func (_mr *MockConnectionMockRecorder) SetReadDeadline(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetReadDeadline", reflect.TypeOf((*MockConnection)(nil).SetReadDeadline), arg0)
}

// SetWriteDeadline mocks base method
func (_m *MockConnection) SetWriteDeadline(_param0 time.Time) {
	_m.ctrl.Call(_m, "SetWriteDeadline", _param0)
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline
func (_mr *MockConnectionMockRecorder) SetWriteDeadline(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockConnection)(nil).SetWriteDeadline), arg0)
}

// MockSession is a mock of Session interface
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSession) EXPECT() *MockSessionMockRecorder {
	return _m.recorder
}

// Auth mocks base method
func (_m *MockSession) Auth() {
	_m.ctrl.Call(_m, "Auth")
}

// Auth indicates an expected call of Auth
func (_mr *MockSessionMockRecorder) Auth() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Auth", reflect.TypeOf((*MockSession)(nil).Auth))
}

// Close mocks base method
func (_m *MockSession) Close() {
	_m.ctrl.Call(_m, "Close")
}

// Close indicates an expected call of Close
func (_mr *MockSessionMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockSession)(nil).Close))
}

// DeregisterEventConsumer mocks base method
func (_m *MockSession) DeregisterEventConsumer(_param0 utils.EventConsumer) {
	_m.ctrl.Call(_m, "DeregisterEventConsumer", _param0)
}

// DeregisterEventConsumer indicates an expected call of DeregisterEventConsumer
func (_mr *MockSessionMockRecorder) DeregisterEventConsumer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeregisterEventConsumer", reflect.TypeOf((*MockSession)(nil).DeregisterEventConsumer), arg0)
}

// Done mocks base method
func (_m *MockSession) Done() <-chan struct{} {
	ret := _m.ctrl.Call(_m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done
func (_mr *MockSessionMockRecorder) Done() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Done", reflect.TypeOf((*MockSession)(nil).Done))
}

// GetClockOffset mocks base method
func (_m *MockSession) GetClockOffset() int64 {
	ret := _m.ctrl.Call(_m, "GetClockOffset")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetClockOffset indicates an expected call of GetClockOffset
func (_mr *MockSessionMockRecorder) GetClockOffset() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetClockOffset", reflect.TypeOf((*MockSession)(nil).GetClockOffset))
}

// GetLatency mocks base method
func (_m *MockSession) GetLatency() int64 {
	ret := _m.ctrl.Call(_m, "GetLatency")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetLatency indicates an expected call of GetLatency
func (_mr *MockSessionMockRecorder) GetLatency() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetLatency", reflect.TypeOf((*MockSession)(nil).GetLatency))
}

// HasLatencyMeasurements mocks base method
func (_m *MockSession) HasLatencyMeasurements() bool {
	ret := _m.ctrl.Call(_m, "HasLatencyMeasurements")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasLatencyMeasurements indicates an expected call of HasLatencyMeasurements
func (_mr *MockSessionMockRecorder) HasLatencyMeasurements() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HasLatencyMeasurements", reflect.TypeOf((*MockSession)(nil).HasLatencyMeasurements))
}

// RegisterEventConsumer mocks base method
func (_m *MockSession) RegisterEventConsumer(_param0 utils.EventConsumer) {
	_m.ctrl.Call(_m, "RegisterEventConsumer", _param0)
}

// RegisterEventConsumer indicates an expected call of RegisterEventConsumer
func (_mr *MockSessionMockRecorder) RegisterEventConsumer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RegisterEventConsumer", reflect.TypeOf((*MockSession)(nil).RegisterEventConsumer), arg0)
}

// Respond mocks base method
func (_m *MockSession) Respond(_param0 protocol.Frame) {
	_m.ctrl.Call(_m, "Respond", _param0)
}

// Respond indicates an expected call of Respond
func (_mr *MockSessionMockRecorder) Respond(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Respond", reflect.TypeOf((*MockSession)(nil).Respond), arg0)
}

// Send mocks base method
func (_m *MockSession) Send(_param0 protocol.Frame) {
	_m.ctrl.Call(_m, "Send", _param0)
}

// Send indicates an expected call of Send
func (_mr *MockSessionMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Send", reflect.TypeOf((*MockSession)(nil).Send), arg0)
}

// MockCheckScheduler is a mock of CheckScheduler interface
type MockCheckScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockCheckSchedulerMockRecorder
}

// MockCheckSchedulerMockRecorder is the mock recorder for MockCheckScheduler
type MockCheckSchedulerMockRecorder struct {
	mock *MockCheckScheduler
}

// NewMockCheckScheduler creates a new mock instance
func NewMockCheckScheduler(ctrl *gomock.Controller) *MockCheckScheduler {
	mock := &MockCheckScheduler{ctrl: ctrl}
	mock.recorder = &MockCheckSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockCheckScheduler) EXPECT() *MockCheckSchedulerMockRecorder {
	return _m.recorder
}

// CancelCheck mocks base method
func (_m *MockCheckScheduler) CancelCheck(_param0 check.Check) {
	_m.ctrl.Call(_m, "CancelCheck", _param0)
}

// CancelCheck indicates an expected call of CancelCheck
func (_mr *MockCheckSchedulerMockRecorder) CancelCheck(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CancelCheck", reflect.TypeOf((*MockCheckScheduler)(nil).CancelCheck), arg0)
}

// Schedule mocks base method
func (_m *MockCheckScheduler) Schedule(_param0 check.Check) {
	_m.ctrl.Call(_m, "Schedule", _param0)
}

// Schedule indicates an expected call of Schedule
func (_mr *MockCheckSchedulerMockRecorder) Schedule(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Schedule", reflect.TypeOf((*MockCheckScheduler)(nil).Schedule), arg0)
}

// MockCheckExecutor is a mock of CheckExecutor interface
type MockCheckExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockCheckExecutorMockRecorder
}

// MockCheckExecutorMockRecorder is the mock recorder for MockCheckExecutor
type MockCheckExecutorMockRecorder struct {
	mock *MockCheckExecutor
}

// NewMockCheckExecutor creates a new mock instance
func NewMockCheckExecutor(ctrl *gomock.Controller) *MockCheckExecutor {
	mock := &MockCheckExecutor{ctrl: ctrl}
	mock.recorder = &MockCheckExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockCheckExecutor) EXPECT() *MockCheckExecutorMockRecorder {
	return _m.recorder
}

// Execute mocks base method
func (_m *MockCheckExecutor) Execute(_param0 check.Check) {
	_m.ctrl.Call(_m, "Execute", _param0)
}

// Execute indicates an expected call of Execute
func (_mr *MockCheckExecutorMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Execute", reflect.TypeOf((*MockCheckExecutor)(nil).Execute), arg0)
}

// MockScheduler is a mock of Scheduler interface
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockScheduler) Close() {
	_m.ctrl.Call(_m, "Close")
}

// Close indicates an expected call of Close
func (_mr *MockSchedulerMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockScheduler)(nil).Close))
}

// GetContext mocks base method
func (_m *MockScheduler) GetContext() (context.Context, context.CancelFunc) {
	ret := _m.ctrl.Call(_m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(context.CancelFunc)
	return ret0, ret1
}

// GetContext indicates an expected call of GetContext
func (_mr *MockSchedulerMockRecorder) GetContext() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetContext", reflect.TypeOf((*MockScheduler)(nil).GetContext))
}

// GetScheduledChecks mocks base method
func (_m *MockScheduler) GetScheduledChecks() []check.Check {
	ret := _m.ctrl.Call(_m, "GetScheduledChecks")
	ret0, _ := ret[0].([]check.Check)
	return ret0
}

// GetScheduledChecks indicates an expected call of GetScheduledChecks
func (_mr *MockSchedulerMockRecorder) GetScheduledChecks() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetScheduledChecks", reflect.TypeOf((*MockScheduler)(nil).GetScheduledChecks))
}

// GetZoneID mocks base method
func (_m *MockScheduler) GetZoneID() string {
	ret := _m.ctrl.Call(_m, "GetZoneID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetZoneID indicates an expected call of GetZoneID
func (_mr *MockSchedulerMockRecorder) GetZoneID() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetZoneID", reflect.TypeOf((*MockScheduler)(nil).GetZoneID))
}

// ReconcileChecks mocks base method
func (_m *MockScheduler) ReconcileChecks(_param0 poller.ChecksPrepared) {
	_m.ctrl.Call(_m, "ReconcileChecks", _param0)
}

// ReconcileChecks indicates an expected call of ReconcileChecks
func (_mr *MockSchedulerMockRecorder) ReconcileChecks(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReconcileChecks", reflect.TypeOf((*MockScheduler)(nil).ReconcileChecks), arg0)
}

// Reset mocks base method
func (_m *MockScheduler) Reset() {
	_m.ctrl.Call(_m, "Reset")
}

// Reset indicates an expected call of Reset
func (_mr *MockSchedulerMockRecorder) Reset() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Reset", reflect.TypeOf((*MockScheduler)(nil).Reset))
}

// SendMetrics mocks base method
func (_m *MockScheduler) SendMetrics(_param0 *check.ResultSet) {
	_m.ctrl.Call(_m, "SendMetrics", _param0)
}

// SendMetrics indicates an expected call of SendMetrics
func (_mr *MockSchedulerMockRecorder) SendMetrics(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SendMetrics", reflect.TypeOf((*MockScheduler)(nil).SendMetrics), arg0)
}

// ValidateChecks mocks base method
func (_m *MockScheduler) ValidateChecks(_param0 poller.ChecksPreparing) error {
	ret := _m.ctrl.Call(_m, "ValidateChecks", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateChecks indicates an expected call of ValidateChecks
func (_mr *MockSchedulerMockRecorder) ValidateChecks(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ValidateChecks", reflect.TypeOf((*MockScheduler)(nil).ValidateChecks), arg0)
}

// MockChecksReconciler is a mock of ChecksReconciler interface
type MockChecksReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockChecksReconcilerMockRecorder
}

// MockChecksReconcilerMockRecorder is the mock recorder for MockChecksReconciler
type MockChecksReconcilerMockRecorder struct {
	mock *MockChecksReconciler
}

// NewMockChecksReconciler creates a new mock instance
func NewMockChecksReconciler(ctrl *gomock.Controller) *MockChecksReconciler {
	mock := &MockChecksReconciler{ctrl: ctrl}
	mock.recorder = &MockChecksReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockChecksReconciler) EXPECT() *MockChecksReconcilerMockRecorder {
	return _m.recorder
}

// ReconcileChecks mocks base method
func (_m *MockChecksReconciler) ReconcileChecks(_param0 poller.ChecksPrepared) {
	_m.ctrl.Call(_m, "ReconcileChecks", _param0)
}

// ReconcileChecks indicates an expected call of ReconcileChecks
func (_mr *MockChecksReconcilerMockRecorder) ReconcileChecks(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReconcileChecks", reflect.TypeOf((*MockChecksReconciler)(nil).ReconcileChecks), arg0)
}

// ValidateChecks mocks base method
func (_m *MockChecksReconciler) ValidateChecks(_param0 poller.ChecksPreparing) error {
	ret := _m.ctrl.Call(_m, "ValidateChecks", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateChecks indicates an expected call of ValidateChecks
func (_mr *MockChecksReconcilerMockRecorder) ValidateChecks(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ValidateChecks", reflect.TypeOf((*MockChecksReconciler)(nil).ValidateChecks), arg0)
}
