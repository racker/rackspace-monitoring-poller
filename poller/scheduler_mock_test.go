// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/racker/rackspace-monitoring-poller/poller (interfaces: Scheduler)

package poller

import (
	gomock "github.com/golang/mock/gomock"
	check "github.com/racker/rackspace-monitoring-poller/check"
	protocol "github.com/racker/rackspace-monitoring-poller/protocol"
)

// Mock of Scheduler interface
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *_MockSchedulerRecorder
}

// Recorder for MockScheduler (not exported)
type _MockSchedulerRecorder struct {
	mock *MockScheduler
}

func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &_MockSchedulerRecorder{mock}
	return mock
}

func (_m *MockScheduler) EXPECT() *_MockSchedulerRecorder {
	return _m.recorder
}

func (_m *MockScheduler) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockSchedulerRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockScheduler) Input() chan protocol.Frame {
	ret := _m.ctrl.Call(_m, "Input")
	ret0, _ := ret[0].(chan protocol.Frame)
	return ret0
}

func (_mr *_MockSchedulerRecorder) Input() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Input")
}

func (_m *MockScheduler) Register(_param0 check.Check) {
	_m.ctrl.Call(_m, "Register", _param0)
}

func (_mr *_MockSchedulerRecorder) Register(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Register", arg0)
}

func (_m *MockScheduler) RunFrameConsumer() {
	_m.ctrl.Call(_m, "RunFrameConsumer")
}

func (_mr *_MockSchedulerRecorder) RunFrameConsumer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RunFrameConsumer")
}

func (_m *MockScheduler) SendMetrics(_param0 *check.CheckResultSet) {
	_m.ctrl.Call(_m, "SendMetrics", _param0)
}

func (_mr *_MockSchedulerRecorder) SendMetrics(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendMetrics", arg0)
}
