// Automatically generated by MockGen. DO NOT EDIT!
// Source: poller/connection_stream.go

package poller

import (
	gomock "github.com/golang/mock/gomock"
	check "github.com/racker/rackspace-monitoring-poller/check"
	config "github.com/racker/rackspace-monitoring-poller/config"
)

// Mock of ConnectionStreamInterface interface
type MockConnectionStreamInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockConnectionStreamInterfaceRecorder
}

// Recorder for MockConnectionStreamInterface (not exported)
type _MockConnectionStreamInterfaceRecorder struct {
	mock *MockConnectionStreamInterface
}

func NewMockConnectionStreamInterface(ctrl *gomock.Controller) *MockConnectionStreamInterface {
	mock := &MockConnectionStreamInterface{ctrl: ctrl}
	mock.recorder = &_MockConnectionStreamInterfaceRecorder{mock}
	return mock
}

func (_m *MockConnectionStreamInterface) EXPECT() *_MockConnectionStreamInterfaceRecorder {
	return _m.recorder
}

func (_m *MockConnectionStreamInterface) GetConfig() *config.Config {
	ret := _m.ctrl.Call(_m, "GetConfig")
	ret0, _ := ret[0].(*config.Config)
	return ret0
}

func (_mr *_MockConnectionStreamInterfaceRecorder) GetConfig() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetConfig")
}

func (_m *MockConnectionStreamInterface) GetConnections() map[string]ConnectionInterface {
	ret := _m.ctrl.Call(_m, "GetConnections")
	ret0, _ := ret[0].(map[string]ConnectionInterface)
	return ret0
}

func (_mr *_MockConnectionStreamInterfaceRecorder) GetConnections() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetConnections")
}

func (_m *MockConnectionStreamInterface) RegisterConnection(qry string, conn ConnectionInterface) error {
	ret := _m.ctrl.Call(_m, "RegisterConnection", qry, conn)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnectionStreamInterfaceRecorder) RegisterConnection(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterConnection", arg0, arg1)
}

func (_m *MockConnectionStreamInterface) Stop() {
	_m.ctrl.Call(_m, "Stop")
}

func (_mr *_MockConnectionStreamInterfaceRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}

func (_m *MockConnectionStreamInterface) StopNotify() chan struct{} {
	ret := _m.ctrl.Call(_m, "StopNotify")
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

func (_mr *_MockConnectionStreamInterfaceRecorder) StopNotify() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StopNotify")
}

func (_m *MockConnectionStreamInterface) GetScheduler() *Scheduler {
	ret := _m.ctrl.Call(_m, "GetScheduler")
	ret0, _ := ret[0].(*Scheduler)
	return ret0
}

func (_mr *_MockConnectionStreamInterfaceRecorder) GetScheduler() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetScheduler")
}

func (_m *MockConnectionStreamInterface) SendMetrics(crs *check.CheckResultSet) {
	_m.ctrl.Call(_m, "SendMetrics", crs)
}

func (_mr *_MockConnectionStreamInterfaceRecorder) SendMetrics(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendMetrics", arg0)
}

func (_m *MockConnectionStreamInterface) Connect() {
	_m.ctrl.Call(_m, "Connect")
}

func (_mr *_MockConnectionStreamInterfaceRecorder) Connect() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Connect")
}

func (_m *MockConnectionStreamInterface) WaitCh() <-chan struct{} {
	ret := _m.ctrl.Call(_m, "WaitCh")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

func (_mr *_MockConnectionStreamInterfaceRecorder) WaitCh() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WaitCh")
}

func (_m *MockConnectionStreamInterface) connectBySrv(qry string) {
	_m.ctrl.Call(_m, "connectBySrv", qry)
}

func (_mr *_MockConnectionStreamInterfaceRecorder) connectBySrv(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "connectBySrv", arg0)
}

func (_m *MockConnectionStreamInterface) connectByHost(addr string) {
	_m.ctrl.Call(_m, "connectByHost", addr)
}

func (_mr *_MockConnectionStreamInterfaceRecorder) connectByHost(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "connectByHost", arg0)
}
