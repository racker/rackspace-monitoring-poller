// Automatically generated by MockGen. DO NOT EDIT!
// Source: poller/session.go

package poller

import (
	time "time"

	gomock "github.com/golang/mock/gomock"
	protocol "github.com/racker/rackspace-monitoring-poller/protocol"
)

// Mock of SessionInterface interface
type MockSessionInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockSessionInterfaceRecorder
}

// Recorder for MockSessionInterface (not exported)
type _MockSessionInterfaceRecorder struct {
	mock *MockSessionInterface
}

func NewMockSessionInterface(ctrl *gomock.Controller) *MockSessionInterface {
	mock := &MockSessionInterface{ctrl: ctrl}
	mock.recorder = &_MockSessionInterfaceRecorder{mock}
	return mock
}

func (_m *MockSessionInterface) EXPECT() *_MockSessionInterfaceRecorder {
	return _m.recorder
}

func (_m *MockSessionInterface) Auth() {
	_m.ctrl.Call(_m, "Auth")
}

func (_mr *_MockSessionInterfaceRecorder) Auth() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Auth")
}

func (_m *MockSessionInterface) Send(msg protocol.Frame) {
	_m.ctrl.Call(_m, "Send", msg)
}

func (_mr *_MockSessionInterfaceRecorder) Send(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Send", arg0)
}

func (_m *MockSessionInterface) SendResponse(msg protocol.Frame) {
	_m.ctrl.Call(_m, "SendResponse", msg)
}

func (_mr *_MockSessionInterfaceRecorder) SendResponse(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendResponse", arg0)
}

func (_m *MockSessionInterface) SetHeartbeatInterval(timeout uint64) {
	_m.ctrl.Call(_m, "SetHeartbeatInterval", timeout)
}

func (_mr *_MockSessionInterfaceRecorder) SetHeartbeatInterval(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetHeartbeatInterval", arg0)
}

func (_m *MockSessionInterface) GetReadDeadline() time.Time {
	ret := _m.ctrl.Call(_m, "GetReadDeadline")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

func (_mr *_MockSessionInterfaceRecorder) GetReadDeadline() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetReadDeadline")
}

func (_m *MockSessionInterface) GetWriteDeadline() time.Time {
	ret := _m.ctrl.Call(_m, "GetWriteDeadline")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

func (_mr *_MockSessionInterfaceRecorder) GetWriteDeadline() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetWriteDeadline")
}

func (_m *MockSessionInterface) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockSessionInterfaceRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockSessionInterface) Wait() {
	_m.ctrl.Call(_m, "Wait")
}

func (_mr *_MockSessionInterfaceRecorder) Wait() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Wait")
}
